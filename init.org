#+title: Professeur B's configuration
#+options: toc:4 h:4
#+startup: showeverything
#+property: header-args:emacs-lisp :tangle "~/.emacs.d/init.el"
#+property: header-args: :results silent :eval no-export :comments org

* Introduction

  This file relies on [[https://orgmode.org/worg/org-contrib/babel/][Babel]] which allows to manage an emacs initialization file in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] manner.

  Some inspiration for this file:
  - [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua]]
  - [[https://jonathanabennett.github.io/blog/2019/05/28/emacs.org-~-may-2019/][Jonathan Bennett]]
  - [[http://www.mycpu.org/emacs-productivity-setup/][Emacs - Productivity Tricks/Hacks]] from [[http://www.mycpu.org][Manoj Rao]]
  - [[https://gitlab.com/buildfunthings/emacs-config/][emacs-config]]
  - [[https://github,com/purcell/emacs.d][Steve Purcell]]
  - [[https://github.com/howardabrams/dot-files][Howard Abrams]]

  #+begin_src emacs-lisp
    ;; Minimal UI
    (scroll-bar-mode -1)
    (tool-bar-mode   -1)
    (tooltip-mode    -1)
    (menu-bar-mode   -1)
    (setq inhibit-startup-screen t)
    (setq initial-scratch-message nil)

    ;; OsX stuff
    (setq mac-option-modifier 'none)
    (setq mac-command-modifier 'meta)

    ;; Line truncation
    (setq-default truncate-lines nil)

    (global-visual-line-mode 1)
    (global-display-line-numbers-mode 1)
    (setq line-number-mode t)
    (setq column-number-mode t)

    ;; Font
    (set-face-attribute 'default nil
			;; Problème avec JetBrains Mono et les caractères gras
			:family "JetBrains Mono"
			;; :family "Fira Code"
			:height 140)

    ;; Encoding
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-language-environment 'utf-8)
    (prefer-coding-system 'utf-8)
    ;; Electric pairs
    (electric-pair-mode t)

    ;; allow typing y/n instead of yes/no
    (defalias 'yes-or-no-p 'y-or-n-p)

  #+end_src
    
* Things to do
** TODO Startup screen
** TODO Python mode, lots of things to do
** TODO Html export
*** TODO We need style

* Package installation

  Essai avec src_python[:exports code]{1 + fibo(10)} src_sh[:exports code]{echo -e "test"}.

** Package management initialisation

   We require the =package= package, declare some repositories and initialize it.
   #+begin_src emacs-lisp
     (require 'package)

     (add-to-list 'package-archives
		  '("gnu" . "https://elpa.gnu.org/packages/") t)
     (add-to-list 'package-archives
		  '("melpa" . "https://melpa.org/packages/") t)
     (add-to-list 'package-archives
		  '("org" . "https://orgmode.org/elpa/") t)

     (package-initialize)
   #+end_src

   Next, we install [[https://github.com/raxod502/straight.el#bootstrapping-straightel][straight]] and [[https://github.com/jwiegley/use-package][use-package]] and get it ready to use.
   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (straight-use-package 'use-package)

     ;; (unless (package-installed-p 'use-package)
     ;;   (package-refresh-contents)
     ;;   (package-install 'use-package))

     ;; (eval-when-compile
     ;;   (require 'use-package))
   #+end_src

   We make sure to install packages if needed.
   #+begin_src emacs-lisp
     ;; (require 'use-package-ensure)
     ;; (setq use-package-always-ensure t)
   #+end_src

   # We assign key =C-y= to yank (i.e. paste). It uses a function defined in =use-package=.
   # #+begin_src emacs-lisp
   # (bind-key* "<C-y>" 'yank)
   # #+end_src

** Packages and configuration

*** Utility packages
    * [[https://github.com/purcell/exec-path-from-shell/tree/81125c5adbc903943c016c2984906dc089372a41][exec-path-from-shell]]
    #+begin_src emacs-lisp
      (use-package exec-path-from-shell
	:if (memq window-system '(mac ns))
	:straight t
	:config
	(exec-path-from-shell-initialize)
	)
    #+end_src
    * [[https://github.com/myrjola/diminish.el][diminish]] provides lighter displays of minor-modes.
    #+begin_src emacs-lisp
      (use-package diminish :straight t)
    #+end_src
    - [[https://github.com/justbur/emacs-which-key][whick-key]] makes it easier to discover Emacs key presses. 
    #+begin_src emacs-lisp
      (use-package which-key
	:straight t
	:diminish which-key-mode
	:config
	(setq which-key-separator " ")
	(setq which-key-prefix-prefix "+")
	(setq which-key-idle-delay 0.05)
	(which-key-setup-side-window-bottom)
	(which-key-mode)
	)
      ;; Recent Files
      (use-package recentf
	:straight t
	:config
	(setq recentf-auto-cleanup 'never) ;; prevent issues with Tramp
	(setq recentf-max-saved-items 100)
	(setq recentf-max-menu-items 15)
	(recentf-mode t))
      (use-package hydra
	:straight (:host github :repo "abo-abo/hydra"))
      (use-package major-mode-hydra
	:straight t
	:bind
	("M-SPC" . major-mode-hydra))
    #+end_src
    - a pdf viewer
    #+begin_src emacs-lisp
      (use-package pdf-tools :straight t)
    #+end_src
*** [[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol]]

    - [[https://emacs-lsp.github.io/lsp-mode/lsp-mode.html][Documentation]]

    #+begin_src emacs-lisp
      (setq lsp-keymap-prefix "C-l")
      (use-package lsp-mode
	:straight t
	:hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	       ;; (ocaml-mode . lsp-deferred)
	       ;; (python-mode . lsp-deferred)
	       ;; if you want which-key integration
	       (lsp-mode . lsp-enable-which-key-integration))
	:commands lsp)

      ;; optionally
      (use-package lsp-ui :straight t :commands lsp-ui-mode)
      (use-package company-lsp :straight t :commands company-lsp)
      ;; if you are helm user
      ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
      ;; if you are ivy user
      (use-package lsp-ivy :straight t :commands lsp-ivy-workspace-symbol)
      ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
    #+end_src

    #+RESULTS:

*** Auto-completion with [[http://company-mode.github.io][company]]

    #+begin_src emacs-lisp
      (use-package company
	:straight t
	:diminish (company-mode . " ⓐ")
	:config
	(global-company-mode)
	(setq
	 company-tooltip-align-annotations t
	 company-minimum-prefix-length 2
	 company-idle-delay 0.2
	 company-require-match nil
	 )
	)
    #+end_src

*** Snippets

    #+begin_src emacs-lisp
      (use-package yasnippet
	:straight t
	:config
	(setq yas-verbosity 1)
	(setq yas-wrap-around-region t)
	(yas-global-mode))
      (use-package yasnippet-snippets :straight t)
    #+end_src
 
*** Evil mode

    #+begin_src emacs-lisp
      (use-package evil-leader
	:straight t
	:config
	(global-evil-leader-mode)
	(evil-leader/set-leader "<SPC>"))

      (use-package evil
	:straight t
	:config
	(evil-mode 1)
	)
    #+end_src

    #+begin_src emacs-lisp
      (use-package evil-escape
	:straight t
	:after evil
	:config
	(evil-escape-mode)
	(setq-default evil-escape-key-sequence "jk")
	(setq-default evil-escape-unordered-key-sequence t))

      (use-package evil-commentary
	:straight t
	:after evil
	:config
	(evil-commentary-mode))

      (use-package evil-indent-plus
	:straight t
	:after evil)

      (use-package evil-surround
	:straight t
	:after evil
	:config
	(global-evil-surround-mode))
    #+end_src

    What do we have here?
    - [[https://github.com/syl20bnr/evil-escape/][evil-escape]] which allows to escape to normal mode in many modes,
    - [[https://github.com/linktohack/evil-commentary/][evil-commentary]] which helps commenting out things (=gcc= comments a line, =gc= comments out the target motion),
    - [[https://github.com/TheBB/evil-indent-plus/][evil-indent-plus]] adds textobjects based on indentation, =i= corresponding to same or higher indentation, =I= to include the first line with less indentation and =J= to also include an extra line below,
    - [[https://github.com/emacs-evil/evil-surround/][evil-surround]] which provides many textobjects based on surrounding characters.

    It might be interesting to take a look at:
    - [[https://github.com/emacs-evil/evil-collection/][evil-collection]]
    - [[https://github.com/cofi/evil-leader/tree/39f7014bcf8b36463e0c7512c638bda4bac6c2cf][evil-leader]]

    Now, let's define some hydras

    #+begin_src emacs-lisp
      (pretty-hydra-define mydra-buffer () ("Buffers"
					    ( ("b" list-buffers "list")
					      ("k" kill-buffer "kill")
					      )))

      (evil-leader/set-key "b" 'mydra-buffer/body)
      (which-key-add-key-based-replacements
	"SPC b" "Buffers")

      (pretty-hydra-define mydra-win ()
	(
	 "Actions" (("w" other-window "switch")("c" delete-window "close"))
	 "Split" (("s" split-window-right "horizontally")
		  ("v" split-window-below "vertically"))))

      (evil-leader/set-key "w" 'mydra-win/body)
      (which-key-add-key-based-replacements
	"SPC w" "Windows")
    #+end_src

*** Themes

    I use [[https://github.com/hlissner/emacs-doom-themes/trees/][emacs-doom-themes]].

    #+begin_src emacs-lisp
      (use-package doom-themes
	:ensure t
	:config
	;; (load-theme 'doom-one t)
	;; (load-theme 'doom-city-lights t)
	;; (load-theme 'doom-dracula t)
	;; (load-theme 'doom-losvkem t)
	;; (load-theme 'doom-molokai t)
	;; (load-theme 'doom-moonlight t)
	;; (load-theme 'doom-nord t)
	;; (load-theme 'doom-nord-light t)
	;; (load-theme 'doom-spacegrey t)
	)
      (use-package nord-theme
	:straight t
	:config (load-theme 'nord t))
    #+end_src
    Setup [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] to start automatically in most programming modes.
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
	:straight t
	:hook (prog-mode . rainbow-delimiters-mode)
	:config
	(show-paren-mode 1)
	(electric-pair-mode 1))
    #+end_src
    Let's customize the OSX interface
    #+begin_src emacs-lisp
      ;; Fancy titlebar for MacOS
      (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
      (add-to-list 'default-frame-alist '(ns-appearance . dark))
      (setq ns-use-proxy-icon  nil)
      (setq frame-title-format nil)
    #+end_src

    #+begin_src emacs-lisp
      (use-package ivy
	:straight t
	:diminish (ivy-mode . " Ⅳ")
	:config
	(ivy-mode 1)
	(setq-default
	 ivy-use-virtual-buffers t
	 ivy-virtual-abbreviate 'fullpath
	 ivy-count-format "(%:%)"))

      (use-package swiper
	:straight t
	:after ivy
	:bind* (("C-s" . swiper)))

      (use-package counsel
	:straight t
	:after ivy
	:bind (
	       ("M-x" . counsel-M-x)
	       ("M-y" . counsel-yank-pop)
	       ("C-x C-f" . counsel-find-file)))
    #+end_src

    The first time, one has to run the command =all-the-icons-install-fonts=.
    #+begin_src emacs-lisp
      (use-package all-the-icons :straight t)
      (use-package all-the-icons-ivy
	:straight t
	:config (all-the-icons-ivy-setup))
    #+end_src

** Programming

*** General packages

    - [[https://www.flycheck.org][Flycheck]] syntax checker
    #+begin_src emacs-lisp
      (use-package flycheck
	:straight t
	:init (global-flycheck-mode))
    #+end_src

*** Language specifics
    
**** Python

     Some good advice can be found [[https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a][here]].
    
     #+begin_src emacs-lisp
       (use-package elpy
	 :straight t
	 :init
	 (elpy-enable)
	 ;; (setq python-shell-interpreter "jupyter-console"
	 ;; 	python-shell-interpreter-args "--simple-prompt"
	 ;; 	python-shell-prompt-detect-failure-warning nil)
	 ;; (add-to-list 'python-shell-completion-native-disabled-interpreters
	 ;; 	       "jupyter-console")
	 ;; (add-to-list 'python-shell-completion-native-disabled-interpreters
	 ;; 	       "jupyter")
	 :custom
	 (elpy-shell-codecell-beginning-regexp (concat "^\\(?:"
						       "##.*"
						       "\\|"
						       "#\\s-*<codecell>"
						       "\\|"
						       "#\\s-*In\\[.*\\]:"
						       "\\|"
						       "#[:blank:]*%%"
						       "\\)\\s-*$") "")
	 (elpy-shell-cell-boundary-regexp (concat "^\\(?:"
						  "##.*" "\\|"
						  "#\\s-*<.+>" "\\|"
						  "#\\s-*\\(?:In\\|Out\\)\\[.*\\]:"
						  "\\|"
						  "#[:blank:]*%%"
						  "\\)\\s-*$") "")
	 :hook (
		(elpy-mode . flycheck-mode)
		;; (pyenv-mode . elpy-rpc-restart)
		)
	 :config
	 (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))

       (use-package blacken
	 :straight t
	 :hook (python-mode . blacken-mode)
	 :config (setq blacken-line-length '80)
	 :bind (:map python-mode-map ([remap indent-region] . blacken)))
       (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
       ;; fix for MacOS, see https://github.com/jorgenschaefer/elpy/issues/1550
       (setq elpy-shell-echo-output nil)
       (setq elpy-rpc-python-command "python3")
       (setq elpy-rpc-timeout 2)

       (use-package jupyter :straight t)
     #+end_src

**** OCaml

     Everything has been installed using opam.

     #+begin_src emacs-lisp
       (use-package caml
	 :straight (:host github :repo "ocaml/caml-mode"))

       (use-package ocamlformat
	 :straight (:host github :repo "ocaml-ppx/ocamlformat" :files ("emacs/ocamlformat.el"))
	 ;; TODO: May want to limit this to certain files.
	 :hook (tuareg-mode . (lambda ()
				(add-hook 'before-save-hook #'ocamlformat-before-save nil 't)))
	 :custom (ocamlformat-show-errors nil))
       (use-package tuareg
	 :defines tuareg-mode-map
	 :bind (:map tuareg-mode-map ([remap indent-region] . ocamlformat)))

       ;; (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
     #+end_src

**** LaTeX

     We use [[https://www.gnu.org/software/auctex/documentation.html][AucTeX]].

     #+begin_src emacs-lisp
       ;; (use-package auctex
       ;;   :straight t
       ;; )
     #+end_src

*** Org

    #+begin_src emacs-lisp
      (use-package org
	:straight t
	:ensure org-plus-contrib
	:config
	;; (require 'ox-extra)
	;; (ox-extras-activate '(ignore-headlines))
	)

      (setq org-src-fontify-natively t)
      (use-package htmlize
	:straight t)

      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
	 (python . t)
	 (ocaml . t)
	 )
       )
      (setq org-latex-listings 'minted
	    org-latex-packages-alist '(("" "minted")))
      (setq org-latex-pdf-process (list "latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o %f"))
      ;; (setq org-latex-pdf-process
      ;; '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    #+end_src



